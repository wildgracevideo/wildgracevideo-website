datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider                  = "zod-prisma-types"
  createRelationValuesTypes = true
}

model Message {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  read         Boolean        @default(false)
  email        String         @db.VarChar(255)
  firstname    String         @db.VarChar(255)
  lastname     String         @db.VarChar(255)
  message      String         @db.VarChar(5000)
  replies      MessageReply[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model MessageReply {
  id          String   @id @default(cuid())
  name        String
  toEmail     String
  body        String
  subject     String
  createdAt   DateTime @default(now())
  messageId   Int      @map("user_id")
  message     Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model PurchaseAudit {
  id              String   @id @default(cuid())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
  email           String
  product         String
  country         String?
  firstName       String
  lastName        String?
  sentProduct     Boolean  @default(false)
  stripeSessionId String
  @@index(stripeSessionId)
}
